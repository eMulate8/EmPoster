import asyncio
import random
import subprocess
import logging

import cv2
import mss
import numpy as np
import openai
import psutil
import pyautogui as pg
import win32gui
import win32con
import pytesseract


async def midjorney():
    """ Run discord (if discord not running) and enter prompt which generated by chatGPT to midjorney bot """

    styles = [', hand drawn ', ', cyberpunk style ', ', abstract style ', ', fauvism style ', ', oil paint ',
              ', post-impressionism style ', ', impressionism ', ', digital art ', ', game art ',
              ', futurism style ', ', synthwave style ', ', cartoon style ',
              ', steampunk style ', ', street art ', ', surrealism style ', ', art deco style ']

    print('midjorney')
    text = gpt()
    if text:
        await run_discord()
        await asyncio.sleep(3)
        pg.press('tab')
        await asyncio.sleep(2)
        pg.write('/imagine')
        await asyncio.sleep(2)
        pg.press('tab')
        pg.write(text)
        await asyncio.sleep(2)
        pg.write(random.choice(styles))
        await asyncio.sleep(1)
        pg.press('enter')
        await asyncio.sleep(5)


def gpt():
    """ Generate description from ChatGPT-3.5 """
    openai.api_key = settings.OPENAI_API_KEY
    request_for_sentence = f'Generate 5 random adjective and write them space separated'
    try:
        response_sentence = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": f'{request_for_sentence}'}]
        )

        description = f'{response_sentence["choices"][0]["message"]["content"]} Bitcoin'
    except Exception as e:
        print(f"Error calling OpenAI API: {e}")
        return None
    return description


async def click_left_button():
    pg.mouseDown()
    await asyncio.sleep(0.01)
    pg.mouseUp()


def grab_text(screen_x: int, screen_y: int, screen_width: int, screen_height: int,
              a1: int, a2: int, a3: int, b1: int, b2: int, b3: int, use_bitwise_and=True):
    """
    Search text in the field of screen. You can choose from the
    two recognition modes most suitable for this task - PCM7 or PCM6.

    :param screen_x: x coordinates of up left corner
    :param screen_y: y coordinates of up left corner
    :param screen_width: width of field
    :param screen_height: height of field
    :param a1: lower border of hsv
    :param a2: lower border of hsv
    :param a3: lower border of hsv
    :param b1: upper border of hsv
    :param b2: upper border of hsv
    :param b3: upper border of hsv
    :param use_bitwise_and: uses cv2.bitwise_and or not
    :return: recognized text
    """

    with mss.mss() as sct:
        monitor = {"top": screen_y, "left": screen_x, "width": screen_width, "height": screen_height}
        lower_color = np.array([a1, a2, a3])
        upper_color = np.array([b1, b2, b3])
        img = np.asarray(sct.grab(monitor))
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, lower_color, upper_color)

        if use_bitwise_and:
            res = cv2.bitwise_and(img, img, mask=mask)
            rgb = cv2.cvtColor(res, cv2.COLOR_BGR2RGB)
        else:
            rgb = cv2.cvtColor(mask, cv2.COLOR_BGR2RGB)

        pcm = pytesseract.image_to_string(rgb, lang='eng', config='--psm 7')  # pcm7 or pcm6

        return pcm.lower()


async def run_discord():
    """
    Run discord app if its not running and open channel named 'p'
    (coordinates selected for full window mode app with 1366*768 screen resolution)
    """
    if not check_discord_running():
        subprocess.run(['', '--processStart', 'Discord.exe']) # path to ..\Discord\Update.exe
    else:
        window_handle = win32gui.FindWindow(None, "Discord") # Title of your discord`s main page
        win32gui.ShowWindow(window_handle, win32con.SW_MAXIMIZE)
        win32gui.SetForegroundWindow(window_handle)
        
    # change p\n to your channel name + \n in the end 
    # coordinates may be found by using xy.py
    
    while grab_text(28, 108, 17, 20, 0, 0, 0, 255, 100, 255, True) != 'p\n': 
        await asyncio.sleep(1)
    pg.moveTo(30, 110, duration=0.1)
    await click_left_button()
    await asyncio.sleep(5)
    pg.moveTo(415, 680, duration=0.1)
    await click_left_button()


def check_discord_running():
    """
    Checking discord app is running
    """
    for proc in psutil.process_iter():
        if proc.name() == 'discord.exe':
            return True
    return False


logging.disable(logging.CRITICAL)
pytesseract.pytesseract.tesseract_cmd = "" # path to pytesseract.exe
